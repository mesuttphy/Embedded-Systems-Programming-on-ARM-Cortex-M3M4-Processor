
svc_operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001344  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080014d4  080014d4  000024d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800158c  0800158c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001594  08001594  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800159c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ace  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d7  00000000  00000000  00003b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00003f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cbe  00000000  00000000  00004155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014ff  00000000  00000000  00006e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097bd  00000000  00000000  00008312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011acf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bf4  00000000  00000000  00011b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00012708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080014bc 	.word	0x080014bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080014bc 	.word	0x080014bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <add_numbers>:
#include<stdio.h>

void SVC_Handle_c(uint32_t *pBaseStackFrame);

int32_t add_numbers(int32_t x , int32_t y )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #36");
 800027a:	df24      	svc	36	@ 0x24
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
 800027c:	4603      	mov	r3, r0
 800027e:	60fb      	str	r3, [r7, #12]
	return res;
 8000280:	68fb      	ldr	r3, [r7, #12]

}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <sub_numbers>:


int32_t sub_numbers(int32_t x , int32_t y )
{
 800028e:	b480      	push	{r7}
 8000290:	b085      	sub	sp, #20
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #37");
 8000298:	df25      	svc	37	@ 0x25
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
 800029a:	4603      	mov	r3, r0
 800029c:	60fb      	str	r3, [r7, #12]
	return res;
 800029e:	68fb      	ldr	r3, [r7, #12]


}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <mul_numbers>:

int32_t mul_numbers(int32_t x , int32_t y )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #38");
 80002b6:	df26      	svc	38	@ 0x26
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
 80002b8:	4603      	mov	r3, r0
 80002ba:	60fb      	str	r3, [r7, #12]
	return res;
 80002bc:	68fb      	ldr	r3, [r7, #12]


}
 80002be:	4618      	mov	r0, r3
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <div_numbers>:

int32_t div_numbers(int32_t x , int32_t y )
{
 80002ca:	b480      	push	{r7}
 80002cc:	b085      	sub	sp, #20
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
 80002d2:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #39");
 80002d4:	df27      	svc	39	@ 0x27
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
 80002d6:	4603      	mov	r3, r0
 80002d8:	60fb      	str	r3, [r7, #12]
	return res;
 80002da:	68fb      	ldr	r3, [r7, #12]

}
 80002dc:	4618      	mov	r0, r3
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <main>:


int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	int32_t res;

	res = add_numbers(40, -90);
 80002ee:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 80002f2:	2028      	movs	r0, #40	@ 0x28
 80002f4:	f7ff ffbc 	bl	8000270 <add_numbers>
 80002f8:	6078      	str	r0, [r7, #4]
	printf("Add result = %ld\n",res);
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	4811      	ldr	r0, [pc, #68]	@ (8000344 <main+0x5c>)
 80002fe:	f000 fa11 	bl	8000724 <iprintf>

	res = sub_numbers(25,150);
 8000302:	2196      	movs	r1, #150	@ 0x96
 8000304:	2019      	movs	r0, #25
 8000306:	f7ff ffc2 	bl	800028e <sub_numbers>
 800030a:	6078      	str	r0, [r7, #4]
	printf("Sub result = %ld\n",res);
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	480e      	ldr	r0, [pc, #56]	@ (8000348 <main+0x60>)
 8000310:	f000 fa08 	bl	8000724 <iprintf>

    res = mul_numbers(374,890);
 8000314:	f240 317a 	movw	r1, #890	@ 0x37a
 8000318:	f44f 70bb 	mov.w	r0, #374	@ 0x176
 800031c:	f7ff ffc6 	bl	80002ac <mul_numbers>
 8000320:	6078      	str	r0, [r7, #4]
	printf("mul result = %ld\n", res);
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	4809      	ldr	r0, [pc, #36]	@ (800034c <main+0x64>)
 8000326:	f000 f9fd 	bl	8000724 <iprintf>

	res = div_numbers(67,-3);
 800032a:	f06f 0102 	mvn.w	r1, #2
 800032e:	2043      	movs	r0, #67	@ 0x43
 8000330:	f7ff ffcb 	bl	80002ca <div_numbers>
 8000334:	6078      	str	r0, [r7, #4]
	printf("div result = %ld\n",res);
 8000336:	6879      	ldr	r1, [r7, #4]
 8000338:	4805      	ldr	r0, [pc, #20]	@ (8000350 <main+0x68>)
 800033a:	f000 f9f3 	bl	8000724 <iprintf>



	for(;;);
 800033e:	bf00      	nop
 8000340:	e7fd      	b.n	800033e <main+0x56>
 8000342:	bf00      	nop
 8000344:	080014d4 	.word	0x080014d4
 8000348:	080014e8 	.word	0x080014e8
 800034c:	080014fc 	.word	0x080014fc
 8000350:	08001510 	.word	0x08001510

08000354 <SVC_Handler>:
}


__attribute__( ( naked ) ) void SVC_Handler( void )
{
	__asm ("MRS r0,MSP");
 8000354:	f3ef 8008 	mrs	r0, MSP
	__asm( "B SVC_Handler_c");
 8000358:	f000 b802 	b.w	8000360 <SVC_Handler_c>
}
 800035c:	bf00      	nop
	...

08000360 <SVC_Handler_c>:


void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	printf("in SVC handler\n");
 8000368:	4823      	ldr	r0, [pc, #140]	@ (80003f8 <SVC_Handler_c+0x98>)
 800036a:	f000 fa43 	bl	80007f4 <puts>

	int32_t arg0, arg1,res;

	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3318      	adds	r3, #24
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	61bb      	str	r3, [r7, #24]

	//2. decrement the return address by 2 to point to
	//opcode of the SVC instruction in the program memory
	pReturn_addr-=2;
 8000376:	69bb      	ldr	r3, [r7, #24]
 8000378:	3b02      	subs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]


	//3. extract the SVC number (LSByte of the opcode)
	uint8_t svc_number = *pReturn_addr;
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	75fb      	strb	r3, [r7, #23]

	printf("Svc number is : %d\n",svc_number);
 8000382:	7dfb      	ldrb	r3, [r7, #23]
 8000384:	4619      	mov	r1, r3
 8000386:	481d      	ldr	r0, [pc, #116]	@ (80003fc <SVC_Handler_c+0x9c>)
 8000388:	f000 f9cc 	bl	8000724 <iprintf>

    /* get the operands for the operation */
	arg0 = pBaseOfStackFrame[0];
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	613b      	str	r3, [r7, #16]
	arg1 = pBaseOfStackFrame[1];
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3304      	adds	r3, #4
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]

/*SVC number signifies the type of operation , decode it */
	switch(svc_number)
 800039a:	7dfb      	ldrb	r3, [r7, #23]
 800039c:	3b24      	subs	r3, #36	@ 0x24
 800039e:	2b03      	cmp	r3, #3
 80003a0:	d820      	bhi.n	80003e4 <SVC_Handler_c+0x84>
 80003a2:	a201      	add	r2, pc, #4	@ (adr r2, 80003a8 <SVC_Handler_c+0x48>)
 80003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a8:	080003b9 	.word	0x080003b9
 80003ac:	080003c3 	.word	0x080003c3
 80003b0:	080003cd 	.word	0x080003cd
 80003b4:	080003d9 	.word	0x080003d9
	{
	case 36:
		res = arg0 + arg1;
 80003b8:	693a      	ldr	r2, [r7, #16]
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	61fb      	str	r3, [r7, #28]
		break;
 80003c0:	e013      	b.n	80003ea <SVC_Handler_c+0x8a>
	case 37:
		res = arg0 - arg1;
 80003c2:	693a      	ldr	r2, [r7, #16]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	61fb      	str	r3, [r7, #28]
		break;
 80003ca:	e00e      	b.n	80003ea <SVC_Handler_c+0x8a>
	case 38:
		res = arg0 * arg1;
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	fb02 f303 	mul.w	r3, r2, r3
 80003d4:	61fb      	str	r3, [r7, #28]
		break;
 80003d6:	e008      	b.n	80003ea <SVC_Handler_c+0x8a>
	case 39:
		res = arg0/arg1;
 80003d8:	693a      	ldr	r2, [r7, #16]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80003e0:	61fb      	str	r3, [r7, #28]
		break;
 80003e2:	e002      	b.n	80003ea <SVC_Handler_c+0x8a>
	default:
		printf("invalid svc code\n");
 80003e4:	4806      	ldr	r0, [pc, #24]	@ (8000400 <SVC_Handler_c+0xa0>)
 80003e6:	f000 fa05 	bl	80007f4 <puts>

	}

/*store the result back to stack frame at R0's position */
	pBaseOfStackFrame[0] = res;
 80003ea:	69fa      	ldr	r2, [r7, #28]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	601a      	str	r2, [r3, #0]

}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	08001524 	.word	0x08001524
 80003fc:	08001534 	.word	0x08001534
 8000400:	08001548 	.word	0x08001548

08000404 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	e00a      	b.n	800042c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000416:	f3af 8000 	nop.w
 800041a:	4601      	mov	r1, r0
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbf0      	blt.n	8000416 <_read+0x12>
  }

  return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b086      	sub	sp, #24
 8000442:	af00      	add	r7, sp, #0
 8000444:	60f8      	str	r0, [r7, #12]
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e009      	b.n	8000464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	60ba      	str	r2, [r7, #8]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	429a      	cmp	r2, r3
 800046a:	dbf1      	blt.n	8000450 <_write+0x12>
  }
  return len;
 800046c:	687b      	ldr	r3, [r7, #4]
}
 800046e:	4618      	mov	r0, r3
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <_close>:

int _close(int file)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800049e:	605a      	str	r2, [r3, #4]
  return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <_isatty>:

int _isatty(int file)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e8:	4a14      	ldr	r2, [pc, #80]	@ (800053c <_sbrk+0x5c>)
 80004ea:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <_sbrk+0x60>)
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f4:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d102      	bne.n	8000502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <_sbrk+0x64>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <_sbrk+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000502:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	693a      	ldr	r2, [r7, #16]
 800050c:	429a      	cmp	r2, r3
 800050e:	d207      	bcs.n	8000520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000510:	f000 fa9e 	bl	8000a50 <__errno>
 8000514:	4603      	mov	r3, r0
 8000516:	220c      	movs	r2, #12
 8000518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	e009      	b.n	8000534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <_sbrk+0x64>)
 8000530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000532:	68fb      	ldr	r3, [r7, #12]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20020000 	.word	0x20020000
 8000540:	00000400 	.word	0x00000400
 8000544:	20000078 	.word	0x20000078
 8000548:	200001c8 	.word	0x200001c8

0800054c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	@ (800058c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	@ (8000598 <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057a:	f000 fa6f 	bl	8000a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff feb3 	bl	80002e8 <main>

08000582 <LoopForever>:

LoopForever:
  b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   r0, =_estack
 8000584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000590:	0800159c 	.word	0x0800159c
  ldr r2, =_sbss
 8000594:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000598:	200001c8 	.word	0x200001c8

0800059c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <std>:
 80005a0:	2300      	movs	r3, #0
 80005a2:	b510      	push	{r4, lr}
 80005a4:	4604      	mov	r4, r0
 80005a6:	e9c0 3300 	strd	r3, r3, [r0]
 80005aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ae:	6083      	str	r3, [r0, #8]
 80005b0:	8181      	strh	r1, [r0, #12]
 80005b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80005b4:	81c2      	strh	r2, [r0, #14]
 80005b6:	6183      	str	r3, [r0, #24]
 80005b8:	4619      	mov	r1, r3
 80005ba:	2208      	movs	r2, #8
 80005bc:	305c      	adds	r0, #92	@ 0x5c
 80005be:	f000 f9f9 	bl	80009b4 <memset>
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <std+0x58>)
 80005c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <std+0x5c>)
 80005c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <std+0x60>)
 80005cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <std+0x64>)
 80005d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <std+0x68>)
 80005d4:	6224      	str	r4, [r4, #32]
 80005d6:	429c      	cmp	r4, r3
 80005d8:	d006      	beq.n	80005e8 <std+0x48>
 80005da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005de:	4294      	cmp	r4, r2
 80005e0:	d002      	beq.n	80005e8 <std+0x48>
 80005e2:	33d0      	adds	r3, #208	@ 0xd0
 80005e4:	429c      	cmp	r4, r3
 80005e6:	d105      	bne.n	80005f4 <std+0x54>
 80005e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f0:	f000 ba58 	b.w	8000aa4 <__retarget_lock_init_recursive>
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	08000805 	.word	0x08000805
 80005fc:	08000827 	.word	0x08000827
 8000600:	0800085f 	.word	0x0800085f
 8000604:	08000883 	.word	0x08000883
 8000608:	2000007c 	.word	0x2000007c

0800060c <stdio_exit_handler>:
 800060c:	4a02      	ldr	r2, [pc, #8]	@ (8000618 <stdio_exit_handler+0xc>)
 800060e:	4903      	ldr	r1, [pc, #12]	@ (800061c <stdio_exit_handler+0x10>)
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <stdio_exit_handler+0x14>)
 8000612:	f000 b869 	b.w	80006e8 <_fwalk_sglue>
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	08001345 	.word	0x08001345
 8000620:	20000010 	.word	0x20000010

08000624 <cleanup_stdio>:
 8000624:	6841      	ldr	r1, [r0, #4]
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <cleanup_stdio+0x34>)
 8000628:	4299      	cmp	r1, r3
 800062a:	b510      	push	{r4, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	d001      	beq.n	8000634 <cleanup_stdio+0x10>
 8000630:	f000 fe88 	bl	8001344 <_fflush_r>
 8000634:	68a1      	ldr	r1, [r4, #8]
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <cleanup_stdio+0x38>)
 8000638:	4299      	cmp	r1, r3
 800063a:	d002      	beq.n	8000642 <cleanup_stdio+0x1e>
 800063c:	4620      	mov	r0, r4
 800063e:	f000 fe81 	bl	8001344 <_fflush_r>
 8000642:	68e1      	ldr	r1, [r4, #12]
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <cleanup_stdio+0x3c>)
 8000646:	4299      	cmp	r1, r3
 8000648:	d004      	beq.n	8000654 <cleanup_stdio+0x30>
 800064a:	4620      	mov	r0, r4
 800064c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000650:	f000 be78 	b.w	8001344 <_fflush_r>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	2000007c 	.word	0x2000007c
 800065c:	200000e4 	.word	0x200000e4
 8000660:	2000014c 	.word	0x2000014c

08000664 <global_stdio_init.part.0>:
 8000664:	b510      	push	{r4, lr}
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <global_stdio_init.part.0+0x30>)
 8000668:	4c0b      	ldr	r4, [pc, #44]	@ (8000698 <global_stdio_init.part.0+0x34>)
 800066a:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <global_stdio_init.part.0+0x38>)
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	4620      	mov	r0, r4
 8000670:	2200      	movs	r2, #0
 8000672:	2104      	movs	r1, #4
 8000674:	f7ff ff94 	bl	80005a0 <std>
 8000678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800067c:	2201      	movs	r2, #1
 800067e:	2109      	movs	r1, #9
 8000680:	f7ff ff8e 	bl	80005a0 <std>
 8000684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000688:	2202      	movs	r2, #2
 800068a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068e:	2112      	movs	r1, #18
 8000690:	f7ff bf86 	b.w	80005a0 <std>
 8000694:	200001b4 	.word	0x200001b4
 8000698:	2000007c 	.word	0x2000007c
 800069c:	0800060d 	.word	0x0800060d

080006a0 <__sfp_lock_acquire>:
 80006a0:	4801      	ldr	r0, [pc, #4]	@ (80006a8 <__sfp_lock_acquire+0x8>)
 80006a2:	f000 ba00 	b.w	8000aa6 <__retarget_lock_acquire_recursive>
 80006a6:	bf00      	nop
 80006a8:	200001bd 	.word	0x200001bd

080006ac <__sfp_lock_release>:
 80006ac:	4801      	ldr	r0, [pc, #4]	@ (80006b4 <__sfp_lock_release+0x8>)
 80006ae:	f000 b9fb 	b.w	8000aa8 <__retarget_lock_release_recursive>
 80006b2:	bf00      	nop
 80006b4:	200001bd 	.word	0x200001bd

080006b8 <__sinit>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	f7ff fff0 	bl	80006a0 <__sfp_lock_acquire>
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	b11b      	cbz	r3, 80006cc <__sinit+0x14>
 80006c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c8:	f7ff bff0 	b.w	80006ac <__sfp_lock_release>
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <__sinit+0x28>)
 80006ce:	6223      	str	r3, [r4, #32]
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__sinit+0x2c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f5      	bne.n	80006c4 <__sinit+0xc>
 80006d8:	f7ff ffc4 	bl	8000664 <global_stdio_init.part.0>
 80006dc:	e7f2      	b.n	80006c4 <__sinit+0xc>
 80006de:	bf00      	nop
 80006e0:	08000625 	.word	0x08000625
 80006e4:	200001b4 	.word	0x200001b4

080006e8 <_fwalk_sglue>:
 80006e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006ec:	4607      	mov	r7, r0
 80006ee:	4688      	mov	r8, r1
 80006f0:	4614      	mov	r4, r2
 80006f2:	2600      	movs	r6, #0
 80006f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006f8:	f1b9 0901 	subs.w	r9, r9, #1
 80006fc:	d505      	bpl.n	800070a <_fwalk_sglue+0x22>
 80006fe:	6824      	ldr	r4, [r4, #0]
 8000700:	2c00      	cmp	r4, #0
 8000702:	d1f7      	bne.n	80006f4 <_fwalk_sglue+0xc>
 8000704:	4630      	mov	r0, r6
 8000706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800070a:	89ab      	ldrh	r3, [r5, #12]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d907      	bls.n	8000720 <_fwalk_sglue+0x38>
 8000710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000714:	3301      	adds	r3, #1
 8000716:	d003      	beq.n	8000720 <_fwalk_sglue+0x38>
 8000718:	4629      	mov	r1, r5
 800071a:	4638      	mov	r0, r7
 800071c:	47c0      	blx	r8
 800071e:	4306      	orrs	r6, r0
 8000720:	3568      	adds	r5, #104	@ 0x68
 8000722:	e7e9      	b.n	80006f8 <_fwalk_sglue+0x10>

08000724 <iprintf>:
 8000724:	b40f      	push	{r0, r1, r2, r3}
 8000726:	b507      	push	{r0, r1, r2, lr}
 8000728:	4906      	ldr	r1, [pc, #24]	@ (8000744 <iprintf+0x20>)
 800072a:	ab04      	add	r3, sp, #16
 800072c:	6808      	ldr	r0, [r1, #0]
 800072e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000732:	6881      	ldr	r1, [r0, #8]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	f000 fadb 	bl	8000cf0 <_vfiprintf_r>
 800073a:	b003      	add	sp, #12
 800073c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000740:	b004      	add	sp, #16
 8000742:	4770      	bx	lr
 8000744:	2000000c 	.word	0x2000000c

08000748 <_puts_r>:
 8000748:	6a03      	ldr	r3, [r0, #32]
 800074a:	b570      	push	{r4, r5, r6, lr}
 800074c:	6884      	ldr	r4, [r0, #8]
 800074e:	4605      	mov	r5, r0
 8000750:	460e      	mov	r6, r1
 8000752:	b90b      	cbnz	r3, 8000758 <_puts_r+0x10>
 8000754:	f7ff ffb0 	bl	80006b8 <__sinit>
 8000758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800075a:	07db      	lsls	r3, r3, #31
 800075c:	d405      	bmi.n	800076a <_puts_r+0x22>
 800075e:	89a3      	ldrh	r3, [r4, #12]
 8000760:	0598      	lsls	r0, r3, #22
 8000762:	d402      	bmi.n	800076a <_puts_r+0x22>
 8000764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000766:	f000 f99e 	bl	8000aa6 <__retarget_lock_acquire_recursive>
 800076a:	89a3      	ldrh	r3, [r4, #12]
 800076c:	0719      	lsls	r1, r3, #28
 800076e:	d502      	bpl.n	8000776 <_puts_r+0x2e>
 8000770:	6923      	ldr	r3, [r4, #16]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d135      	bne.n	80007e2 <_puts_r+0x9a>
 8000776:	4621      	mov	r1, r4
 8000778:	4628      	mov	r0, r5
 800077a:	f000 f8c5 	bl	8000908 <__swsetup_r>
 800077e:	b380      	cbz	r0, 80007e2 <_puts_r+0x9a>
 8000780:	f04f 35ff 	mov.w	r5, #4294967295
 8000784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000786:	07da      	lsls	r2, r3, #31
 8000788:	d405      	bmi.n	8000796 <_puts_r+0x4e>
 800078a:	89a3      	ldrh	r3, [r4, #12]
 800078c:	059b      	lsls	r3, r3, #22
 800078e:	d402      	bmi.n	8000796 <_puts_r+0x4e>
 8000790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000792:	f000 f989 	bl	8000aa8 <__retarget_lock_release_recursive>
 8000796:	4628      	mov	r0, r5
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	2b00      	cmp	r3, #0
 800079c:	da04      	bge.n	80007a8 <_puts_r+0x60>
 800079e:	69a2      	ldr	r2, [r4, #24]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dc17      	bgt.n	80007d4 <_puts_r+0x8c>
 80007a4:	290a      	cmp	r1, #10
 80007a6:	d015      	beq.n	80007d4 <_puts_r+0x8c>
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	6022      	str	r2, [r4, #0]
 80007ae:	7019      	strb	r1, [r3, #0]
 80007b0:	68a3      	ldr	r3, [r4, #8]
 80007b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007b6:	3b01      	subs	r3, #1
 80007b8:	60a3      	str	r3, [r4, #8]
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d1ed      	bne.n	800079a <_puts_r+0x52>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da11      	bge.n	80007e6 <_puts_r+0x9e>
 80007c2:	4622      	mov	r2, r4
 80007c4:	210a      	movs	r1, #10
 80007c6:	4628      	mov	r0, r5
 80007c8:	f000 f85f 	bl	800088a <__swbuf_r>
 80007cc:	3001      	adds	r0, #1
 80007ce:	d0d7      	beq.n	8000780 <_puts_r+0x38>
 80007d0:	250a      	movs	r5, #10
 80007d2:	e7d7      	b.n	8000784 <_puts_r+0x3c>
 80007d4:	4622      	mov	r2, r4
 80007d6:	4628      	mov	r0, r5
 80007d8:	f000 f857 	bl	800088a <__swbuf_r>
 80007dc:	3001      	adds	r0, #1
 80007de:	d1e7      	bne.n	80007b0 <_puts_r+0x68>
 80007e0:	e7ce      	b.n	8000780 <_puts_r+0x38>
 80007e2:	3e01      	subs	r6, #1
 80007e4:	e7e4      	b.n	80007b0 <_puts_r+0x68>
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	6022      	str	r2, [r4, #0]
 80007ec:	220a      	movs	r2, #10
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e7ee      	b.n	80007d0 <_puts_r+0x88>
	...

080007f4 <puts>:
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <puts+0xc>)
 80007f6:	4601      	mov	r1, r0
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	f7ff bfa5 	b.w	8000748 <_puts_r>
 80007fe:	bf00      	nop
 8000800:	2000000c 	.word	0x2000000c

08000804 <__sread>:
 8000804:	b510      	push	{r4, lr}
 8000806:	460c      	mov	r4, r1
 8000808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800080c:	f000 f8fc 	bl	8000a08 <_read_r>
 8000810:	2800      	cmp	r0, #0
 8000812:	bfab      	itete	ge
 8000814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000816:	89a3      	ldrhlt	r3, [r4, #12]
 8000818:	181b      	addge	r3, r3, r0
 800081a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800081e:	bfac      	ite	ge
 8000820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000822:	81a3      	strhlt	r3, [r4, #12]
 8000824:	bd10      	pop	{r4, pc}

08000826 <__swrite>:
 8000826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800082a:	461f      	mov	r7, r3
 800082c:	898b      	ldrh	r3, [r1, #12]
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	4605      	mov	r5, r0
 8000832:	460c      	mov	r4, r1
 8000834:	4616      	mov	r6, r2
 8000836:	d505      	bpl.n	8000844 <__swrite+0x1e>
 8000838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083c:	2302      	movs	r3, #2
 800083e:	2200      	movs	r2, #0
 8000840:	f000 f8d0 	bl	80009e4 <_lseek_r>
 8000844:	89a3      	ldrh	r3, [r4, #12]
 8000846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800084a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800084e:	81a3      	strh	r3, [r4, #12]
 8000850:	4632      	mov	r2, r6
 8000852:	463b      	mov	r3, r7
 8000854:	4628      	mov	r0, r5
 8000856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800085a:	f000 b8e7 	b.w	8000a2c <_write_r>

0800085e <__sseek>:
 800085e:	b510      	push	{r4, lr}
 8000860:	460c      	mov	r4, r1
 8000862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000866:	f000 f8bd 	bl	80009e4 <_lseek_r>
 800086a:	1c43      	adds	r3, r0, #1
 800086c:	89a3      	ldrh	r3, [r4, #12]
 800086e:	bf15      	itete	ne
 8000870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800087a:	81a3      	strheq	r3, [r4, #12]
 800087c:	bf18      	it	ne
 800087e:	81a3      	strhne	r3, [r4, #12]
 8000880:	bd10      	pop	{r4, pc}

08000882 <__sclose>:
 8000882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000886:	f000 b89d 	b.w	80009c4 <_close_r>

0800088a <__swbuf_r>:
 800088a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088c:	460e      	mov	r6, r1
 800088e:	4614      	mov	r4, r2
 8000890:	4605      	mov	r5, r0
 8000892:	b118      	cbz	r0, 800089c <__swbuf_r+0x12>
 8000894:	6a03      	ldr	r3, [r0, #32]
 8000896:	b90b      	cbnz	r3, 800089c <__swbuf_r+0x12>
 8000898:	f7ff ff0e 	bl	80006b8 <__sinit>
 800089c:	69a3      	ldr	r3, [r4, #24]
 800089e:	60a3      	str	r3, [r4, #8]
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	071a      	lsls	r2, r3, #28
 80008a4:	d501      	bpl.n	80008aa <__swbuf_r+0x20>
 80008a6:	6923      	ldr	r3, [r4, #16]
 80008a8:	b943      	cbnz	r3, 80008bc <__swbuf_r+0x32>
 80008aa:	4621      	mov	r1, r4
 80008ac:	4628      	mov	r0, r5
 80008ae:	f000 f82b 	bl	8000908 <__swsetup_r>
 80008b2:	b118      	cbz	r0, 80008bc <__swbuf_r+0x32>
 80008b4:	f04f 37ff 	mov.w	r7, #4294967295
 80008b8:	4638      	mov	r0, r7
 80008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	6922      	ldr	r2, [r4, #16]
 80008c0:	1a98      	subs	r0, r3, r2
 80008c2:	6963      	ldr	r3, [r4, #20]
 80008c4:	b2f6      	uxtb	r6, r6
 80008c6:	4283      	cmp	r3, r0
 80008c8:	4637      	mov	r7, r6
 80008ca:	dc05      	bgt.n	80008d8 <__swbuf_r+0x4e>
 80008cc:	4621      	mov	r1, r4
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 fd38 	bl	8001344 <_fflush_r>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d1ed      	bne.n	80008b4 <__swbuf_r+0x2a>
 80008d8:	68a3      	ldr	r3, [r4, #8]
 80008da:	3b01      	subs	r3, #1
 80008dc:	60a3      	str	r3, [r4, #8]
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	6022      	str	r2, [r4, #0]
 80008e4:	701e      	strb	r6, [r3, #0]
 80008e6:	6962      	ldr	r2, [r4, #20]
 80008e8:	1c43      	adds	r3, r0, #1
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d004      	beq.n	80008f8 <__swbuf_r+0x6e>
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	07db      	lsls	r3, r3, #31
 80008f2:	d5e1      	bpl.n	80008b8 <__swbuf_r+0x2e>
 80008f4:	2e0a      	cmp	r6, #10
 80008f6:	d1df      	bne.n	80008b8 <__swbuf_r+0x2e>
 80008f8:	4621      	mov	r1, r4
 80008fa:	4628      	mov	r0, r5
 80008fc:	f000 fd22 	bl	8001344 <_fflush_r>
 8000900:	2800      	cmp	r0, #0
 8000902:	d0d9      	beq.n	80008b8 <__swbuf_r+0x2e>
 8000904:	e7d6      	b.n	80008b4 <__swbuf_r+0x2a>
	...

08000908 <__swsetup_r>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <__swsetup_r+0xa8>)
 800090c:	4605      	mov	r5, r0
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	460c      	mov	r4, r1
 8000912:	b118      	cbz	r0, 800091c <__swsetup_r+0x14>
 8000914:	6a03      	ldr	r3, [r0, #32]
 8000916:	b90b      	cbnz	r3, 800091c <__swsetup_r+0x14>
 8000918:	f7ff fece 	bl	80006b8 <__sinit>
 800091c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000920:	0719      	lsls	r1, r3, #28
 8000922:	d422      	bmi.n	800096a <__swsetup_r+0x62>
 8000924:	06da      	lsls	r2, r3, #27
 8000926:	d407      	bmi.n	8000938 <__swsetup_r+0x30>
 8000928:	2209      	movs	r2, #9
 800092a:	602a      	str	r2, [r5, #0]
 800092c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000930:	81a3      	strh	r3, [r4, #12]
 8000932:	f04f 30ff 	mov.w	r0, #4294967295
 8000936:	e033      	b.n	80009a0 <__swsetup_r+0x98>
 8000938:	0758      	lsls	r0, r3, #29
 800093a:	d512      	bpl.n	8000962 <__swsetup_r+0x5a>
 800093c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800093e:	b141      	cbz	r1, 8000952 <__swsetup_r+0x4a>
 8000940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000944:	4299      	cmp	r1, r3
 8000946:	d002      	beq.n	800094e <__swsetup_r+0x46>
 8000948:	4628      	mov	r0, r5
 800094a:	f000 f8af 	bl	8000aac <_free_r>
 800094e:	2300      	movs	r3, #0
 8000950:	6363      	str	r3, [r4, #52]	@ 0x34
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000958:	81a3      	strh	r3, [r4, #12]
 800095a:	2300      	movs	r3, #0
 800095c:	6063      	str	r3, [r4, #4]
 800095e:	6923      	ldr	r3, [r4, #16]
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	81a3      	strh	r3, [r4, #12]
 800096a:	6923      	ldr	r3, [r4, #16]
 800096c:	b94b      	cbnz	r3, 8000982 <__swsetup_r+0x7a>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000978:	d003      	beq.n	8000982 <__swsetup_r+0x7a>
 800097a:	4621      	mov	r1, r4
 800097c:	4628      	mov	r0, r5
 800097e:	f000 fd2f 	bl	80013e0 <__smakebuf_r>
 8000982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000986:	f013 0201 	ands.w	r2, r3, #1
 800098a:	d00a      	beq.n	80009a2 <__swsetup_r+0x9a>
 800098c:	2200      	movs	r2, #0
 800098e:	60a2      	str	r2, [r4, #8]
 8000990:	6962      	ldr	r2, [r4, #20]
 8000992:	4252      	negs	r2, r2
 8000994:	61a2      	str	r2, [r4, #24]
 8000996:	6922      	ldr	r2, [r4, #16]
 8000998:	b942      	cbnz	r2, 80009ac <__swsetup_r+0xa4>
 800099a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800099e:	d1c5      	bne.n	800092c <__swsetup_r+0x24>
 80009a0:	bd38      	pop	{r3, r4, r5, pc}
 80009a2:	0799      	lsls	r1, r3, #30
 80009a4:	bf58      	it	pl
 80009a6:	6962      	ldrpl	r2, [r4, #20]
 80009a8:	60a2      	str	r2, [r4, #8]
 80009aa:	e7f4      	b.n	8000996 <__swsetup_r+0x8e>
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7f7      	b.n	80009a0 <__swsetup_r+0x98>
 80009b0:	2000000c 	.word	0x2000000c

080009b4 <memset>:
 80009b4:	4402      	add	r2, r0
 80009b6:	4603      	mov	r3, r0
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d100      	bne.n	80009be <memset+0xa>
 80009bc:	4770      	bx	lr
 80009be:	f803 1b01 	strb.w	r1, [r3], #1
 80009c2:	e7f9      	b.n	80009b8 <memset+0x4>

080009c4 <_close_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4d06      	ldr	r5, [pc, #24]	@ (80009e0 <_close_r+0x1c>)
 80009c8:	2300      	movs	r3, #0
 80009ca:	4604      	mov	r4, r0
 80009cc:	4608      	mov	r0, r1
 80009ce:	602b      	str	r3, [r5, #0]
 80009d0:	f7ff fd51 	bl	8000476 <_close>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	d102      	bne.n	80009de <_close_r+0x1a>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b103      	cbz	r3, 80009de <_close_r+0x1a>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	200001b8 	.word	0x200001b8

080009e4 <_lseek_r>:
 80009e4:	b538      	push	{r3, r4, r5, lr}
 80009e6:	4d07      	ldr	r5, [pc, #28]	@ (8000a04 <_lseek_r+0x20>)
 80009e8:	4604      	mov	r4, r0
 80009ea:	4608      	mov	r0, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	f7ff fd66 	bl	80004c4 <_lseek>
 80009f8:	1c43      	adds	r3, r0, #1
 80009fa:	d102      	bne.n	8000a02 <_lseek_r+0x1e>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	b103      	cbz	r3, 8000a02 <_lseek_r+0x1e>
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	200001b8 	.word	0x200001b8

08000a08 <_read_r>:
 8000a08:	b538      	push	{r3, r4, r5, lr}
 8000a0a:	4d07      	ldr	r5, [pc, #28]	@ (8000a28 <_read_r+0x20>)
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	4611      	mov	r1, r2
 8000a12:	2200      	movs	r2, #0
 8000a14:	602a      	str	r2, [r5, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f7ff fcf4 	bl	8000404 <_read>
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	d102      	bne.n	8000a26 <_read_r+0x1e>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	b103      	cbz	r3, 8000a26 <_read_r+0x1e>
 8000a24:	6023      	str	r3, [r4, #0]
 8000a26:	bd38      	pop	{r3, r4, r5, pc}
 8000a28:	200001b8 	.word	0x200001b8

08000a2c <_write_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4d07      	ldr	r5, [pc, #28]	@ (8000a4c <_write_r+0x20>)
 8000a30:	4604      	mov	r4, r0
 8000a32:	4608      	mov	r0, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	2200      	movs	r2, #0
 8000a38:	602a      	str	r2, [r5, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f7ff fcff 	bl	800043e <_write>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d102      	bne.n	8000a4a <_write_r+0x1e>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	b103      	cbz	r3, 8000a4a <_write_r+0x1e>
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	200001b8 	.word	0x200001b8

08000a50 <__errno>:
 8000a50:	4b01      	ldr	r3, [pc, #4]	@ (8000a58 <__errno+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <__libc_init_array>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a94 <__libc_init_array+0x38>)
 8000a60:	4c0d      	ldr	r4, [pc, #52]	@ (8000a98 <__libc_init_array+0x3c>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	2600      	movs	r6, #0
 8000a68:	42a6      	cmp	r6, r4
 8000a6a:	d109      	bne.n	8000a80 <__libc_init_array+0x24>
 8000a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a9c <__libc_init_array+0x40>)
 8000a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000aa0 <__libc_init_array+0x44>)
 8000a70:	f000 fd24 	bl	80014bc <_init>
 8000a74:	1b64      	subs	r4, r4, r5
 8000a76:	10a4      	asrs	r4, r4, #2
 8000a78:	2600      	movs	r6, #0
 8000a7a:	42a6      	cmp	r6, r4
 8000a7c:	d105      	bne.n	8000a8a <__libc_init_array+0x2e>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a84:	4798      	blx	r3
 8000a86:	3601      	adds	r6, #1
 8000a88:	e7ee      	b.n	8000a68 <__libc_init_array+0xc>
 8000a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8e:	4798      	blx	r3
 8000a90:	3601      	adds	r6, #1
 8000a92:	e7f2      	b.n	8000a7a <__libc_init_array+0x1e>
 8000a94:	08001594 	.word	0x08001594
 8000a98:	08001594 	.word	0x08001594
 8000a9c:	08001594 	.word	0x08001594
 8000aa0:	08001598 	.word	0x08001598

08000aa4 <__retarget_lock_init_recursive>:
 8000aa4:	4770      	bx	lr

08000aa6 <__retarget_lock_acquire_recursive>:
 8000aa6:	4770      	bx	lr

08000aa8 <__retarget_lock_release_recursive>:
 8000aa8:	4770      	bx	lr
	...

08000aac <_free_r>:
 8000aac:	b538      	push	{r3, r4, r5, lr}
 8000aae:	4605      	mov	r5, r0
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	d041      	beq.n	8000b38 <_free_r+0x8c>
 8000ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab8:	1f0c      	subs	r4, r1, #4
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bfb8      	it	lt
 8000abe:	18e4      	addlt	r4, r4, r3
 8000ac0:	f000 f8e0 	bl	8000c84 <__malloc_lock>
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <_free_r+0x90>)
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	b933      	cbnz	r3, 8000ad8 <_free_r+0x2c>
 8000aca:	6063      	str	r3, [r4, #4]
 8000acc:	6014      	str	r4, [r2, #0]
 8000ace:	4628      	mov	r0, r5
 8000ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ad4:	f000 b8dc 	b.w	8000c90 <__malloc_unlock>
 8000ad8:	42a3      	cmp	r3, r4
 8000ada:	d908      	bls.n	8000aee <_free_r+0x42>
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	1821      	adds	r1, r4, r0
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	bf01      	itttt	eq
 8000ae4:	6819      	ldreq	r1, [r3, #0]
 8000ae6:	685b      	ldreq	r3, [r3, #4]
 8000ae8:	1809      	addeq	r1, r1, r0
 8000aea:	6021      	streq	r1, [r4, #0]
 8000aec:	e7ed      	b.n	8000aca <_free_r+0x1e>
 8000aee:	461a      	mov	r2, r3
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	b10b      	cbz	r3, 8000af8 <_free_r+0x4c>
 8000af4:	42a3      	cmp	r3, r4
 8000af6:	d9fa      	bls.n	8000aee <_free_r+0x42>
 8000af8:	6811      	ldr	r1, [r2, #0]
 8000afa:	1850      	adds	r0, r2, r1
 8000afc:	42a0      	cmp	r0, r4
 8000afe:	d10b      	bne.n	8000b18 <_free_r+0x6c>
 8000b00:	6820      	ldr	r0, [r4, #0]
 8000b02:	4401      	add	r1, r0
 8000b04:	1850      	adds	r0, r2, r1
 8000b06:	4283      	cmp	r3, r0
 8000b08:	6011      	str	r1, [r2, #0]
 8000b0a:	d1e0      	bne.n	8000ace <_free_r+0x22>
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	6053      	str	r3, [r2, #4]
 8000b12:	4408      	add	r0, r1
 8000b14:	6010      	str	r0, [r2, #0]
 8000b16:	e7da      	b.n	8000ace <_free_r+0x22>
 8000b18:	d902      	bls.n	8000b20 <_free_r+0x74>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	602b      	str	r3, [r5, #0]
 8000b1e:	e7d6      	b.n	8000ace <_free_r+0x22>
 8000b20:	6820      	ldr	r0, [r4, #0]
 8000b22:	1821      	adds	r1, r4, r0
 8000b24:	428b      	cmp	r3, r1
 8000b26:	bf04      	itt	eq
 8000b28:	6819      	ldreq	r1, [r3, #0]
 8000b2a:	685b      	ldreq	r3, [r3, #4]
 8000b2c:	6063      	str	r3, [r4, #4]
 8000b2e:	bf04      	itt	eq
 8000b30:	1809      	addeq	r1, r1, r0
 8000b32:	6021      	streq	r1, [r4, #0]
 8000b34:	6054      	str	r4, [r2, #4]
 8000b36:	e7ca      	b.n	8000ace <_free_r+0x22>
 8000b38:	bd38      	pop	{r3, r4, r5, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001c4 	.word	0x200001c4

08000b40 <sbrk_aligned>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4e0f      	ldr	r6, [pc, #60]	@ (8000b80 <sbrk_aligned+0x40>)
 8000b44:	460c      	mov	r4, r1
 8000b46:	6831      	ldr	r1, [r6, #0]
 8000b48:	4605      	mov	r5, r0
 8000b4a:	b911      	cbnz	r1, 8000b52 <sbrk_aligned+0x12>
 8000b4c:	f000 fca6 	bl	800149c <_sbrk_r>
 8000b50:	6030      	str	r0, [r6, #0]
 8000b52:	4621      	mov	r1, r4
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 fca1 	bl	800149c <_sbrk_r>
 8000b5a:	1c43      	adds	r3, r0, #1
 8000b5c:	d103      	bne.n	8000b66 <sbrk_aligned+0x26>
 8000b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8000b62:	4620      	mov	r0, r4
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
 8000b66:	1cc4      	adds	r4, r0, #3
 8000b68:	f024 0403 	bic.w	r4, r4, #3
 8000b6c:	42a0      	cmp	r0, r4
 8000b6e:	d0f8      	beq.n	8000b62 <sbrk_aligned+0x22>
 8000b70:	1a21      	subs	r1, r4, r0
 8000b72:	4628      	mov	r0, r5
 8000b74:	f000 fc92 	bl	800149c <_sbrk_r>
 8000b78:	3001      	adds	r0, #1
 8000b7a:	d1f2      	bne.n	8000b62 <sbrk_aligned+0x22>
 8000b7c:	e7ef      	b.n	8000b5e <sbrk_aligned+0x1e>
 8000b7e:	bf00      	nop
 8000b80:	200001c0 	.word	0x200001c0

08000b84 <_malloc_r>:
 8000b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b88:	1ccd      	adds	r5, r1, #3
 8000b8a:	f025 0503 	bic.w	r5, r5, #3
 8000b8e:	3508      	adds	r5, #8
 8000b90:	2d0c      	cmp	r5, #12
 8000b92:	bf38      	it	cc
 8000b94:	250c      	movcc	r5, #12
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	4606      	mov	r6, r0
 8000b9a:	db01      	blt.n	8000ba0 <_malloc_r+0x1c>
 8000b9c:	42a9      	cmp	r1, r5
 8000b9e:	d904      	bls.n	8000baa <_malloc_r+0x26>
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	6033      	str	r3, [r6, #0]
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c80 <_malloc_r+0xfc>
 8000bae:	f000 f869 	bl	8000c84 <__malloc_lock>
 8000bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb6:	461c      	mov	r4, r3
 8000bb8:	bb44      	cbnz	r4, 8000c0c <_malloc_r+0x88>
 8000bba:	4629      	mov	r1, r5
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	f7ff ffbf 	bl	8000b40 <sbrk_aligned>
 8000bc2:	1c43      	adds	r3, r0, #1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	d158      	bne.n	8000c7a <_malloc_r+0xf6>
 8000bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8000bcc:	4627      	mov	r7, r4
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d143      	bne.n	8000c5a <_malloc_r+0xd6>
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d04b      	beq.n	8000c6e <_malloc_r+0xea>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	4639      	mov	r1, r7
 8000bda:	4630      	mov	r0, r6
 8000bdc:	eb04 0903 	add.w	r9, r4, r3
 8000be0:	f000 fc5c 	bl	800149c <_sbrk_r>
 8000be4:	4581      	cmp	r9, r0
 8000be6:	d142      	bne.n	8000c6e <_malloc_r+0xea>
 8000be8:	6821      	ldr	r1, [r4, #0]
 8000bea:	1a6d      	subs	r5, r5, r1
 8000bec:	4629      	mov	r1, r5
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f7ff ffa6 	bl	8000b40 <sbrk_aligned>
 8000bf4:	3001      	adds	r0, #1
 8000bf6:	d03a      	beq.n	8000c6e <_malloc_r+0xea>
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	442b      	add	r3, r5
 8000bfc:	6023      	str	r3, [r4, #0]
 8000bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	bb62      	cbnz	r2, 8000c60 <_malloc_r+0xdc>
 8000c06:	f8c8 7000 	str.w	r7, [r8]
 8000c0a:	e00f      	b.n	8000c2c <_malloc_r+0xa8>
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	1b52      	subs	r2, r2, r5
 8000c10:	d420      	bmi.n	8000c54 <_malloc_r+0xd0>
 8000c12:	2a0b      	cmp	r2, #11
 8000c14:	d917      	bls.n	8000c46 <_malloc_r+0xc2>
 8000c16:	1961      	adds	r1, r4, r5
 8000c18:	42a3      	cmp	r3, r4
 8000c1a:	6025      	str	r5, [r4, #0]
 8000c1c:	bf18      	it	ne
 8000c1e:	6059      	strne	r1, [r3, #4]
 8000c20:	6863      	ldr	r3, [r4, #4]
 8000c22:	bf08      	it	eq
 8000c24:	f8c8 1000 	streq.w	r1, [r8]
 8000c28:	5162      	str	r2, [r4, r5]
 8000c2a:	604b      	str	r3, [r1, #4]
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	f000 f82f 	bl	8000c90 <__malloc_unlock>
 8000c32:	f104 000b 	add.w	r0, r4, #11
 8000c36:	1d23      	adds	r3, r4, #4
 8000c38:	f020 0007 	bic.w	r0, r0, #7
 8000c3c:	1ac2      	subs	r2, r0, r3
 8000c3e:	bf1c      	itt	ne
 8000c40:	1a1b      	subne	r3, r3, r0
 8000c42:	50a3      	strne	r3, [r4, r2]
 8000c44:	e7af      	b.n	8000ba6 <_malloc_r+0x22>
 8000c46:	6862      	ldr	r2, [r4, #4]
 8000c48:	42a3      	cmp	r3, r4
 8000c4a:	bf0c      	ite	eq
 8000c4c:	f8c8 2000 	streq.w	r2, [r8]
 8000c50:	605a      	strne	r2, [r3, #4]
 8000c52:	e7eb      	b.n	8000c2c <_malloc_r+0xa8>
 8000c54:	4623      	mov	r3, r4
 8000c56:	6864      	ldr	r4, [r4, #4]
 8000c58:	e7ae      	b.n	8000bb8 <_malloc_r+0x34>
 8000c5a:	463c      	mov	r4, r7
 8000c5c:	687f      	ldr	r7, [r7, #4]
 8000c5e:	e7b6      	b.n	8000bce <_malloc_r+0x4a>
 8000c60:	461a      	mov	r2, r3
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	42a3      	cmp	r3, r4
 8000c66:	d1fb      	bne.n	8000c60 <_malloc_r+0xdc>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	6053      	str	r3, [r2, #4]
 8000c6c:	e7de      	b.n	8000c2c <_malloc_r+0xa8>
 8000c6e:	230c      	movs	r3, #12
 8000c70:	6033      	str	r3, [r6, #0]
 8000c72:	4630      	mov	r0, r6
 8000c74:	f000 f80c 	bl	8000c90 <__malloc_unlock>
 8000c78:	e794      	b.n	8000ba4 <_malloc_r+0x20>
 8000c7a:	6005      	str	r5, [r0, #0]
 8000c7c:	e7d6      	b.n	8000c2c <_malloc_r+0xa8>
 8000c7e:	bf00      	nop
 8000c80:	200001c4 	.word	0x200001c4

08000c84 <__malloc_lock>:
 8000c84:	4801      	ldr	r0, [pc, #4]	@ (8000c8c <__malloc_lock+0x8>)
 8000c86:	f7ff bf0e 	b.w	8000aa6 <__retarget_lock_acquire_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	200001bc 	.word	0x200001bc

08000c90 <__malloc_unlock>:
 8000c90:	4801      	ldr	r0, [pc, #4]	@ (8000c98 <__malloc_unlock+0x8>)
 8000c92:	f7ff bf09 	b.w	8000aa8 <__retarget_lock_release_recursive>
 8000c96:	bf00      	nop
 8000c98:	200001bc 	.word	0x200001bc

08000c9c <__sfputc_r>:
 8000c9c:	6893      	ldr	r3, [r2, #8]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	b410      	push	{r4}
 8000ca4:	6093      	str	r3, [r2, #8]
 8000ca6:	da08      	bge.n	8000cba <__sfputc_r+0x1e>
 8000ca8:	6994      	ldr	r4, [r2, #24]
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	db01      	blt.n	8000cb2 <__sfputc_r+0x16>
 8000cae:	290a      	cmp	r1, #10
 8000cb0:	d103      	bne.n	8000cba <__sfputc_r+0x1e>
 8000cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb6:	f7ff bde8 	b.w	800088a <__swbuf_r>
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	1c58      	adds	r0, r3, #1
 8000cbe:	6010      	str	r0, [r2, #0]
 8000cc0:	7019      	strb	r1, [r3, #0]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <__sfputs_r>:
 8000cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ccc:	4606      	mov	r6, r0
 8000cce:	460f      	mov	r7, r1
 8000cd0:	4614      	mov	r4, r2
 8000cd2:	18d5      	adds	r5, r2, r3
 8000cd4:	42ac      	cmp	r4, r5
 8000cd6:	d101      	bne.n	8000cdc <__sfputs_r+0x12>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	e007      	b.n	8000cec <__sfputs_r+0x22>
 8000cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce0:	463a      	mov	r2, r7
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	f7ff ffda 	bl	8000c9c <__sfputc_r>
 8000ce8:	1c43      	adds	r3, r0, #1
 8000cea:	d1f3      	bne.n	8000cd4 <__sfputs_r+0xa>
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cf0 <_vfiprintf_r>:
 8000cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	b09d      	sub	sp, #116	@ 0x74
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	b118      	cbz	r0, 8000d08 <_vfiprintf_r+0x18>
 8000d00:	6a03      	ldr	r3, [r0, #32]
 8000d02:	b90b      	cbnz	r3, 8000d08 <_vfiprintf_r+0x18>
 8000d04:	f7ff fcd8 	bl	80006b8 <__sinit>
 8000d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d0a:	07d9      	lsls	r1, r3, #31
 8000d0c:	d405      	bmi.n	8000d1a <_vfiprintf_r+0x2a>
 8000d0e:	89ab      	ldrh	r3, [r5, #12]
 8000d10:	059a      	lsls	r2, r3, #22
 8000d12:	d402      	bmi.n	8000d1a <_vfiprintf_r+0x2a>
 8000d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d16:	f7ff fec6 	bl	8000aa6 <__retarget_lock_acquire_recursive>
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	071b      	lsls	r3, r3, #28
 8000d1e:	d501      	bpl.n	8000d24 <_vfiprintf_r+0x34>
 8000d20:	692b      	ldr	r3, [r5, #16]
 8000d22:	b99b      	cbnz	r3, 8000d4c <_vfiprintf_r+0x5c>
 8000d24:	4629      	mov	r1, r5
 8000d26:	4630      	mov	r0, r6
 8000d28:	f7ff fdee 	bl	8000908 <__swsetup_r>
 8000d2c:	b170      	cbz	r0, 8000d4c <_vfiprintf_r+0x5c>
 8000d2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d30:	07dc      	lsls	r4, r3, #31
 8000d32:	d504      	bpl.n	8000d3e <_vfiprintf_r+0x4e>
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	b01d      	add	sp, #116	@ 0x74
 8000d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	0598      	lsls	r0, r3, #22
 8000d42:	d4f7      	bmi.n	8000d34 <_vfiprintf_r+0x44>
 8000d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d46:	f7ff feaf 	bl	8000aa8 <__retarget_lock_release_recursive>
 8000d4a:	e7f3      	b.n	8000d34 <_vfiprintf_r+0x44>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d50:	2320      	movs	r3, #32
 8000d52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d5a:	2330      	movs	r3, #48	@ 0x30
 8000d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f0c <_vfiprintf_r+0x21c>
 8000d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d64:	f04f 0901 	mov.w	r9, #1
 8000d68:	4623      	mov	r3, r4
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d70:	b10a      	cbz	r2, 8000d76 <_vfiprintf_r+0x86>
 8000d72:	2a25      	cmp	r2, #37	@ 0x25
 8000d74:	d1f9      	bne.n	8000d6a <_vfiprintf_r+0x7a>
 8000d76:	ebba 0b04 	subs.w	fp, sl, r4
 8000d7a:	d00b      	beq.n	8000d94 <_vfiprintf_r+0xa4>
 8000d7c:	465b      	mov	r3, fp
 8000d7e:	4622      	mov	r2, r4
 8000d80:	4629      	mov	r1, r5
 8000d82:	4630      	mov	r0, r6
 8000d84:	f7ff ffa1 	bl	8000cca <__sfputs_r>
 8000d88:	3001      	adds	r0, #1
 8000d8a:	f000 80a7 	beq.w	8000edc <_vfiprintf_r+0x1ec>
 8000d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d90:	445a      	add	r2, fp
 8000d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d94:	f89a 3000 	ldrb.w	r3, [sl]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 809f 	beq.w	8000edc <_vfiprintf_r+0x1ec>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000da8:	f10a 0a01 	add.w	sl, sl, #1
 8000dac:	9304      	str	r3, [sp, #16]
 8000dae:	9307      	str	r3, [sp, #28]
 8000db0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000db4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000db6:	4654      	mov	r4, sl
 8000db8:	2205      	movs	r2, #5
 8000dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dbe:	4853      	ldr	r0, [pc, #332]	@ (8000f0c <_vfiprintf_r+0x21c>)
 8000dc0:	f7ff fa06 	bl	80001d0 <memchr>
 8000dc4:	9a04      	ldr	r2, [sp, #16]
 8000dc6:	b9d8      	cbnz	r0, 8000e00 <_vfiprintf_r+0x110>
 8000dc8:	06d1      	lsls	r1, r2, #27
 8000dca:	bf44      	itt	mi
 8000dcc:	2320      	movmi	r3, #32
 8000dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dd2:	0713      	lsls	r3, r2, #28
 8000dd4:	bf44      	itt	mi
 8000dd6:	232b      	movmi	r3, #43	@ 0x2b
 8000dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8000de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000de2:	d015      	beq.n	8000e10 <_vfiprintf_r+0x120>
 8000de4:	9a07      	ldr	r2, [sp, #28]
 8000de6:	4654      	mov	r4, sl
 8000de8:	2000      	movs	r0, #0
 8000dea:	f04f 0c0a 	mov.w	ip, #10
 8000dee:	4621      	mov	r1, r4
 8000df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000df4:	3b30      	subs	r3, #48	@ 0x30
 8000df6:	2b09      	cmp	r3, #9
 8000df8:	d94b      	bls.n	8000e92 <_vfiprintf_r+0x1a2>
 8000dfa:	b1b0      	cbz	r0, 8000e2a <_vfiprintf_r+0x13a>
 8000dfc:	9207      	str	r2, [sp, #28]
 8000dfe:	e014      	b.n	8000e2a <_vfiprintf_r+0x13a>
 8000e00:	eba0 0308 	sub.w	r3, r0, r8
 8000e04:	fa09 f303 	lsl.w	r3, r9, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	9304      	str	r3, [sp, #16]
 8000e0c:	46a2      	mov	sl, r4
 8000e0e:	e7d2      	b.n	8000db6 <_vfiprintf_r+0xc6>
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	1d19      	adds	r1, r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	9103      	str	r1, [sp, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bfbb      	ittet	lt
 8000e1c:	425b      	neglt	r3, r3
 8000e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e22:	9307      	strge	r3, [sp, #28]
 8000e24:	9307      	strlt	r3, [sp, #28]
 8000e26:	bfb8      	it	lt
 8000e28:	9204      	strlt	r2, [sp, #16]
 8000e2a:	7823      	ldrb	r3, [r4, #0]
 8000e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e2e:	d10a      	bne.n	8000e46 <_vfiprintf_r+0x156>
 8000e30:	7863      	ldrb	r3, [r4, #1]
 8000e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e34:	d132      	bne.n	8000e9c <_vfiprintf_r+0x1ac>
 8000e36:	9b03      	ldr	r3, [sp, #12]
 8000e38:	1d1a      	adds	r2, r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	9203      	str	r2, [sp, #12]
 8000e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e42:	3402      	adds	r4, #2
 8000e44:	9305      	str	r3, [sp, #20]
 8000e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f1c <_vfiprintf_r+0x22c>
 8000e4a:	7821      	ldrb	r1, [r4, #0]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4650      	mov	r0, sl
 8000e50:	f7ff f9be 	bl	80001d0 <memchr>
 8000e54:	b138      	cbz	r0, 8000e66 <_vfiprintf_r+0x176>
 8000e56:	9b04      	ldr	r3, [sp, #16]
 8000e58:	eba0 000a 	sub.w	r0, r0, sl
 8000e5c:	2240      	movs	r2, #64	@ 0x40
 8000e5e:	4082      	lsls	r2, r0
 8000e60:	4313      	orrs	r3, r2
 8000e62:	3401      	adds	r4, #1
 8000e64:	9304      	str	r3, [sp, #16]
 8000e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6a:	4829      	ldr	r0, [pc, #164]	@ (8000f10 <_vfiprintf_r+0x220>)
 8000e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e70:	2206      	movs	r2, #6
 8000e72:	f7ff f9ad 	bl	80001d0 <memchr>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d03f      	beq.n	8000efa <_vfiprintf_r+0x20a>
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <_vfiprintf_r+0x224>)
 8000e7c:	bb1b      	cbnz	r3, 8000ec6 <_vfiprintf_r+0x1d6>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	3307      	adds	r3, #7
 8000e82:	f023 0307 	bic.w	r3, r3, #7
 8000e86:	3308      	adds	r3, #8
 8000e88:	9303      	str	r3, [sp, #12]
 8000e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e8c:	443b      	add	r3, r7
 8000e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e90:	e76a      	b.n	8000d68 <_vfiprintf_r+0x78>
 8000e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e96:	460c      	mov	r4, r1
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e7a8      	b.n	8000dee <_vfiprintf_r+0xfe>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	3401      	adds	r4, #1
 8000ea0:	9305      	str	r3, [sp, #20]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 0c0a 	mov.w	ip, #10
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eae:	3a30      	subs	r2, #48	@ 0x30
 8000eb0:	2a09      	cmp	r2, #9
 8000eb2:	d903      	bls.n	8000ebc <_vfiprintf_r+0x1cc>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0c6      	beq.n	8000e46 <_vfiprintf_r+0x156>
 8000eb8:	9105      	str	r1, [sp, #20]
 8000eba:	e7c4      	b.n	8000e46 <_vfiprintf_r+0x156>
 8000ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e7f0      	b.n	8000ea8 <_vfiprintf_r+0x1b8>
 8000ec6:	ab03      	add	r3, sp, #12
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	462a      	mov	r2, r5
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <_vfiprintf_r+0x228>)
 8000ece:	a904      	add	r1, sp, #16
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	f3af 8000 	nop.w
 8000ed6:	4607      	mov	r7, r0
 8000ed8:	1c78      	adds	r0, r7, #1
 8000eda:	d1d6      	bne.n	8000e8a <_vfiprintf_r+0x19a>
 8000edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ede:	07d9      	lsls	r1, r3, #31
 8000ee0:	d405      	bmi.n	8000eee <_vfiprintf_r+0x1fe>
 8000ee2:	89ab      	ldrh	r3, [r5, #12]
 8000ee4:	059a      	lsls	r2, r3, #22
 8000ee6:	d402      	bmi.n	8000eee <_vfiprintf_r+0x1fe>
 8000ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000eea:	f7ff fddd 	bl	8000aa8 <__retarget_lock_release_recursive>
 8000eee:	89ab      	ldrh	r3, [r5, #12]
 8000ef0:	065b      	lsls	r3, r3, #25
 8000ef2:	f53f af1f 	bmi.w	8000d34 <_vfiprintf_r+0x44>
 8000ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ef8:	e71e      	b.n	8000d38 <_vfiprintf_r+0x48>
 8000efa:	ab03      	add	r3, sp, #12
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	462a      	mov	r2, r5
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <_vfiprintf_r+0x228>)
 8000f02:	a904      	add	r1, sp, #16
 8000f04:	4630      	mov	r0, r6
 8000f06:	f000 f879 	bl	8000ffc <_printf_i>
 8000f0a:	e7e4      	b.n	8000ed6 <_vfiprintf_r+0x1e6>
 8000f0c:	08001559 	.word	0x08001559
 8000f10:	08001563 	.word	0x08001563
 8000f14:	00000000 	.word	0x00000000
 8000f18:	08000ccb 	.word	0x08000ccb
 8000f1c:	0800155f 	.word	0x0800155f

08000f20 <_printf_common>:
 8000f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f24:	4616      	mov	r6, r2
 8000f26:	4698      	mov	r8, r3
 8000f28:	688a      	ldr	r2, [r1, #8]
 8000f2a:	690b      	ldr	r3, [r1, #16]
 8000f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	bfb8      	it	lt
 8000f34:	4613      	movlt	r3, r2
 8000f36:	6033      	str	r3, [r6, #0]
 8000f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f3c:	4607      	mov	r7, r0
 8000f3e:	460c      	mov	r4, r1
 8000f40:	b10a      	cbz	r2, 8000f46 <_printf_common+0x26>
 8000f42:	3301      	adds	r3, #1
 8000f44:	6033      	str	r3, [r6, #0]
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	0699      	lsls	r1, r3, #26
 8000f4a:	bf42      	ittt	mi
 8000f4c:	6833      	ldrmi	r3, [r6, #0]
 8000f4e:	3302      	addmi	r3, #2
 8000f50:	6033      	strmi	r3, [r6, #0]
 8000f52:	6825      	ldr	r5, [r4, #0]
 8000f54:	f015 0506 	ands.w	r5, r5, #6
 8000f58:	d106      	bne.n	8000f68 <_printf_common+0x48>
 8000f5a:	f104 0a19 	add.w	sl, r4, #25
 8000f5e:	68e3      	ldr	r3, [r4, #12]
 8000f60:	6832      	ldr	r2, [r6, #0]
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	42ab      	cmp	r3, r5
 8000f66:	dc26      	bgt.n	8000fb6 <_printf_common+0x96>
 8000f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f6c:	6822      	ldr	r2, [r4, #0]
 8000f6e:	3b00      	subs	r3, #0
 8000f70:	bf18      	it	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	0692      	lsls	r2, r2, #26
 8000f76:	d42b      	bmi.n	8000fd0 <_printf_common+0xb0>
 8000f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f7c:	4641      	mov	r1, r8
 8000f7e:	4638      	mov	r0, r7
 8000f80:	47c8      	blx	r9
 8000f82:	3001      	adds	r0, #1
 8000f84:	d01e      	beq.n	8000fc4 <_printf_common+0xa4>
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	6922      	ldr	r2, [r4, #16]
 8000f8a:	f003 0306 	and.w	r3, r3, #6
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf02      	ittt	eq
 8000f92:	68e5      	ldreq	r5, [r4, #12]
 8000f94:	6833      	ldreq	r3, [r6, #0]
 8000f96:	1aed      	subeq	r5, r5, r3
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	bf0c      	ite	eq
 8000f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fa0:	2500      	movne	r5, #0
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	bfc4      	itt	gt
 8000fa6:	1a9b      	subgt	r3, r3, r2
 8000fa8:	18ed      	addgt	r5, r5, r3
 8000faa:	2600      	movs	r6, #0
 8000fac:	341a      	adds	r4, #26
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d11a      	bne.n	8000fe8 <_printf_common+0xc8>
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	e008      	b.n	8000fc8 <_printf_common+0xa8>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4652      	mov	r2, sl
 8000fba:	4641      	mov	r1, r8
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	47c8      	blx	r9
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	d103      	bne.n	8000fcc <_printf_common+0xac>
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fcc:	3501      	adds	r5, #1
 8000fce:	e7c6      	b.n	8000f5e <_printf_common+0x3e>
 8000fd0:	18e1      	adds	r1, r4, r3
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	2030      	movs	r0, #48	@ 0x30
 8000fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fda:	4422      	add	r2, r4
 8000fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	e7c7      	b.n	8000f78 <_printf_common+0x58>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4622      	mov	r2, r4
 8000fec:	4641      	mov	r1, r8
 8000fee:	4638      	mov	r0, r7
 8000ff0:	47c8      	blx	r9
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	d0e6      	beq.n	8000fc4 <_printf_common+0xa4>
 8000ff6:	3601      	adds	r6, #1
 8000ff8:	e7d9      	b.n	8000fae <_printf_common+0x8e>
	...

08000ffc <_printf_i>:
 8000ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	7e0f      	ldrb	r7, [r1, #24]
 8001002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001004:	2f78      	cmp	r7, #120	@ 0x78
 8001006:	4691      	mov	r9, r2
 8001008:	4680      	mov	r8, r0
 800100a:	460c      	mov	r4, r1
 800100c:	469a      	mov	sl, r3
 800100e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001012:	d807      	bhi.n	8001024 <_printf_i+0x28>
 8001014:	2f62      	cmp	r7, #98	@ 0x62
 8001016:	d80a      	bhi.n	800102e <_printf_i+0x32>
 8001018:	2f00      	cmp	r7, #0
 800101a:	f000 80d2 	beq.w	80011c2 <_printf_i+0x1c6>
 800101e:	2f58      	cmp	r7, #88	@ 0x58
 8001020:	f000 80b9 	beq.w	8001196 <_printf_i+0x19a>
 8001024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800102c:	e03a      	b.n	80010a4 <_printf_i+0xa8>
 800102e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001032:	2b15      	cmp	r3, #21
 8001034:	d8f6      	bhi.n	8001024 <_printf_i+0x28>
 8001036:	a101      	add	r1, pc, #4	@ (adr r1, 800103c <_printf_i+0x40>)
 8001038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800103c:	08001095 	.word	0x08001095
 8001040:	080010a9 	.word	0x080010a9
 8001044:	08001025 	.word	0x08001025
 8001048:	08001025 	.word	0x08001025
 800104c:	08001025 	.word	0x08001025
 8001050:	08001025 	.word	0x08001025
 8001054:	080010a9 	.word	0x080010a9
 8001058:	08001025 	.word	0x08001025
 800105c:	08001025 	.word	0x08001025
 8001060:	08001025 	.word	0x08001025
 8001064:	08001025 	.word	0x08001025
 8001068:	080011a9 	.word	0x080011a9
 800106c:	080010d3 	.word	0x080010d3
 8001070:	08001163 	.word	0x08001163
 8001074:	08001025 	.word	0x08001025
 8001078:	08001025 	.word	0x08001025
 800107c:	080011cb 	.word	0x080011cb
 8001080:	08001025 	.word	0x08001025
 8001084:	080010d3 	.word	0x080010d3
 8001088:	08001025 	.word	0x08001025
 800108c:	08001025 	.word	0x08001025
 8001090:	0800116b 	.word	0x0800116b
 8001094:	6833      	ldr	r3, [r6, #0]
 8001096:	1d1a      	adds	r2, r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6032      	str	r2, [r6, #0]
 800109c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010a4:	2301      	movs	r3, #1
 80010a6:	e09d      	b.n	80011e4 <_printf_i+0x1e8>
 80010a8:	6833      	ldr	r3, [r6, #0]
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	1d19      	adds	r1, r3, #4
 80010ae:	6031      	str	r1, [r6, #0]
 80010b0:	0606      	lsls	r6, r0, #24
 80010b2:	d501      	bpl.n	80010b8 <_printf_i+0xbc>
 80010b4:	681d      	ldr	r5, [r3, #0]
 80010b6:	e003      	b.n	80010c0 <_printf_i+0xc4>
 80010b8:	0645      	lsls	r5, r0, #25
 80010ba:	d5fb      	bpl.n	80010b4 <_printf_i+0xb8>
 80010bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010c0:	2d00      	cmp	r5, #0
 80010c2:	da03      	bge.n	80010cc <_printf_i+0xd0>
 80010c4:	232d      	movs	r3, #45	@ 0x2d
 80010c6:	426d      	negs	r5, r5
 80010c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010cc:	4859      	ldr	r0, [pc, #356]	@ (8001234 <_printf_i+0x238>)
 80010ce:	230a      	movs	r3, #10
 80010d0:	e011      	b.n	80010f6 <_printf_i+0xfa>
 80010d2:	6821      	ldr	r1, [r4, #0]
 80010d4:	6833      	ldr	r3, [r6, #0]
 80010d6:	0608      	lsls	r0, r1, #24
 80010d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80010dc:	d402      	bmi.n	80010e4 <_printf_i+0xe8>
 80010de:	0649      	lsls	r1, r1, #25
 80010e0:	bf48      	it	mi
 80010e2:	b2ad      	uxthmi	r5, r5
 80010e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80010e6:	4853      	ldr	r0, [pc, #332]	@ (8001234 <_printf_i+0x238>)
 80010e8:	6033      	str	r3, [r6, #0]
 80010ea:	bf14      	ite	ne
 80010ec:	230a      	movne	r3, #10
 80010ee:	2308      	moveq	r3, #8
 80010f0:	2100      	movs	r1, #0
 80010f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010f6:	6866      	ldr	r6, [r4, #4]
 80010f8:	60a6      	str	r6, [r4, #8]
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	bfa2      	ittt	ge
 80010fe:	6821      	ldrge	r1, [r4, #0]
 8001100:	f021 0104 	bicge.w	r1, r1, #4
 8001104:	6021      	strge	r1, [r4, #0]
 8001106:	b90d      	cbnz	r5, 800110c <_printf_i+0x110>
 8001108:	2e00      	cmp	r6, #0
 800110a:	d04b      	beq.n	80011a4 <_printf_i+0x1a8>
 800110c:	4616      	mov	r6, r2
 800110e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001112:	fb03 5711 	mls	r7, r3, r1, r5
 8001116:	5dc7      	ldrb	r7, [r0, r7]
 8001118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800111c:	462f      	mov	r7, r5
 800111e:	42bb      	cmp	r3, r7
 8001120:	460d      	mov	r5, r1
 8001122:	d9f4      	bls.n	800110e <_printf_i+0x112>
 8001124:	2b08      	cmp	r3, #8
 8001126:	d10b      	bne.n	8001140 <_printf_i+0x144>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	07df      	lsls	r7, r3, #31
 800112c:	d508      	bpl.n	8001140 <_printf_i+0x144>
 800112e:	6923      	ldr	r3, [r4, #16]
 8001130:	6861      	ldr	r1, [r4, #4]
 8001132:	4299      	cmp	r1, r3
 8001134:	bfde      	ittt	le
 8001136:	2330      	movle	r3, #48	@ 0x30
 8001138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800113c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001140:	1b92      	subs	r2, r2, r6
 8001142:	6122      	str	r2, [r4, #16]
 8001144:	f8cd a000 	str.w	sl, [sp]
 8001148:	464b      	mov	r3, r9
 800114a:	aa03      	add	r2, sp, #12
 800114c:	4621      	mov	r1, r4
 800114e:	4640      	mov	r0, r8
 8001150:	f7ff fee6 	bl	8000f20 <_printf_common>
 8001154:	3001      	adds	r0, #1
 8001156:	d14a      	bne.n	80011ee <_printf_i+0x1f2>
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	b004      	add	sp, #16
 800115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	4833      	ldr	r0, [pc, #204]	@ (8001238 <_printf_i+0x23c>)
 800116c:	2778      	movs	r7, #120	@ 0x78
 800116e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	6831      	ldr	r1, [r6, #0]
 8001176:	061f      	lsls	r7, r3, #24
 8001178:	f851 5b04 	ldr.w	r5, [r1], #4
 800117c:	d402      	bmi.n	8001184 <_printf_i+0x188>
 800117e:	065f      	lsls	r7, r3, #25
 8001180:	bf48      	it	mi
 8001182:	b2ad      	uxthmi	r5, r5
 8001184:	6031      	str	r1, [r6, #0]
 8001186:	07d9      	lsls	r1, r3, #31
 8001188:	bf44      	itt	mi
 800118a:	f043 0320 	orrmi.w	r3, r3, #32
 800118e:	6023      	strmi	r3, [r4, #0]
 8001190:	b11d      	cbz	r5, 800119a <_printf_i+0x19e>
 8001192:	2310      	movs	r3, #16
 8001194:	e7ac      	b.n	80010f0 <_printf_i+0xf4>
 8001196:	4827      	ldr	r0, [pc, #156]	@ (8001234 <_printf_i+0x238>)
 8001198:	e7e9      	b.n	800116e <_printf_i+0x172>
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f023 0320 	bic.w	r3, r3, #32
 80011a0:	6023      	str	r3, [r4, #0]
 80011a2:	e7f6      	b.n	8001192 <_printf_i+0x196>
 80011a4:	4616      	mov	r6, r2
 80011a6:	e7bd      	b.n	8001124 <_printf_i+0x128>
 80011a8:	6833      	ldr	r3, [r6, #0]
 80011aa:	6825      	ldr	r5, [r4, #0]
 80011ac:	6961      	ldr	r1, [r4, #20]
 80011ae:	1d18      	adds	r0, r3, #4
 80011b0:	6030      	str	r0, [r6, #0]
 80011b2:	062e      	lsls	r6, r5, #24
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	d501      	bpl.n	80011bc <_printf_i+0x1c0>
 80011b8:	6019      	str	r1, [r3, #0]
 80011ba:	e002      	b.n	80011c2 <_printf_i+0x1c6>
 80011bc:	0668      	lsls	r0, r5, #25
 80011be:	d5fb      	bpl.n	80011b8 <_printf_i+0x1bc>
 80011c0:	8019      	strh	r1, [r3, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	6123      	str	r3, [r4, #16]
 80011c6:	4616      	mov	r6, r2
 80011c8:	e7bc      	b.n	8001144 <_printf_i+0x148>
 80011ca:	6833      	ldr	r3, [r6, #0]
 80011cc:	1d1a      	adds	r2, r3, #4
 80011ce:	6032      	str	r2, [r6, #0]
 80011d0:	681e      	ldr	r6, [r3, #0]
 80011d2:	6862      	ldr	r2, [r4, #4]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7fe fffa 	bl	80001d0 <memchr>
 80011dc:	b108      	cbz	r0, 80011e2 <_printf_i+0x1e6>
 80011de:	1b80      	subs	r0, r0, r6
 80011e0:	6060      	str	r0, [r4, #4]
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	6123      	str	r3, [r4, #16]
 80011e6:	2300      	movs	r3, #0
 80011e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011ec:	e7aa      	b.n	8001144 <_printf_i+0x148>
 80011ee:	6923      	ldr	r3, [r4, #16]
 80011f0:	4632      	mov	r2, r6
 80011f2:	4649      	mov	r1, r9
 80011f4:	4640      	mov	r0, r8
 80011f6:	47d0      	blx	sl
 80011f8:	3001      	adds	r0, #1
 80011fa:	d0ad      	beq.n	8001158 <_printf_i+0x15c>
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	079b      	lsls	r3, r3, #30
 8001200:	d413      	bmi.n	800122a <_printf_i+0x22e>
 8001202:	68e0      	ldr	r0, [r4, #12]
 8001204:	9b03      	ldr	r3, [sp, #12]
 8001206:	4298      	cmp	r0, r3
 8001208:	bfb8      	it	lt
 800120a:	4618      	movlt	r0, r3
 800120c:	e7a6      	b.n	800115c <_printf_i+0x160>
 800120e:	2301      	movs	r3, #1
 8001210:	4632      	mov	r2, r6
 8001212:	4649      	mov	r1, r9
 8001214:	4640      	mov	r0, r8
 8001216:	47d0      	blx	sl
 8001218:	3001      	adds	r0, #1
 800121a:	d09d      	beq.n	8001158 <_printf_i+0x15c>
 800121c:	3501      	adds	r5, #1
 800121e:	68e3      	ldr	r3, [r4, #12]
 8001220:	9903      	ldr	r1, [sp, #12]
 8001222:	1a5b      	subs	r3, r3, r1
 8001224:	42ab      	cmp	r3, r5
 8001226:	dcf2      	bgt.n	800120e <_printf_i+0x212>
 8001228:	e7eb      	b.n	8001202 <_printf_i+0x206>
 800122a:	2500      	movs	r5, #0
 800122c:	f104 0619 	add.w	r6, r4, #25
 8001230:	e7f5      	b.n	800121e <_printf_i+0x222>
 8001232:	bf00      	nop
 8001234:	0800156a 	.word	0x0800156a
 8001238:	0800157b 	.word	0x0800157b

0800123c <__sflush_r>:
 800123c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001244:	0716      	lsls	r6, r2, #28
 8001246:	4605      	mov	r5, r0
 8001248:	460c      	mov	r4, r1
 800124a:	d454      	bmi.n	80012f6 <__sflush_r+0xba>
 800124c:	684b      	ldr	r3, [r1, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	dc02      	bgt.n	8001258 <__sflush_r+0x1c>
 8001252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd48      	ble.n	80012ea <__sflush_r+0xae>
 8001258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800125a:	2e00      	cmp	r6, #0
 800125c:	d045      	beq.n	80012ea <__sflush_r+0xae>
 800125e:	2300      	movs	r3, #0
 8001260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001264:	682f      	ldr	r7, [r5, #0]
 8001266:	6a21      	ldr	r1, [r4, #32]
 8001268:	602b      	str	r3, [r5, #0]
 800126a:	d030      	beq.n	80012ce <__sflush_r+0x92>
 800126c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	0759      	lsls	r1, r3, #29
 8001272:	d505      	bpl.n	8001280 <__sflush_r+0x44>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800127a:	b10b      	cbz	r3, 8001280 <__sflush_r+0x44>
 800127c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800127e:	1ad2      	subs	r2, r2, r3
 8001280:	2300      	movs	r3, #0
 8001282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001284:	6a21      	ldr	r1, [r4, #32]
 8001286:	4628      	mov	r0, r5
 8001288:	47b0      	blx	r6
 800128a:	1c43      	adds	r3, r0, #1
 800128c:	89a3      	ldrh	r3, [r4, #12]
 800128e:	d106      	bne.n	800129e <__sflush_r+0x62>
 8001290:	6829      	ldr	r1, [r5, #0]
 8001292:	291d      	cmp	r1, #29
 8001294:	d82b      	bhi.n	80012ee <__sflush_r+0xb2>
 8001296:	4a2a      	ldr	r2, [pc, #168]	@ (8001340 <__sflush_r+0x104>)
 8001298:	410a      	asrs	r2, r1
 800129a:	07d6      	lsls	r6, r2, #31
 800129c:	d427      	bmi.n	80012ee <__sflush_r+0xb2>
 800129e:	2200      	movs	r2, #0
 80012a0:	6062      	str	r2, [r4, #4]
 80012a2:	04d9      	lsls	r1, r3, #19
 80012a4:	6922      	ldr	r2, [r4, #16]
 80012a6:	6022      	str	r2, [r4, #0]
 80012a8:	d504      	bpl.n	80012b4 <__sflush_r+0x78>
 80012aa:	1c42      	adds	r2, r0, #1
 80012ac:	d101      	bne.n	80012b2 <__sflush_r+0x76>
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	b903      	cbnz	r3, 80012b4 <__sflush_r+0x78>
 80012b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80012b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012b6:	602f      	str	r7, [r5, #0]
 80012b8:	b1b9      	cbz	r1, 80012ea <__sflush_r+0xae>
 80012ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012be:	4299      	cmp	r1, r3
 80012c0:	d002      	beq.n	80012c8 <__sflush_r+0x8c>
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff fbf2 	bl	8000aac <_free_r>
 80012c8:	2300      	movs	r3, #0
 80012ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80012cc:	e00d      	b.n	80012ea <__sflush_r+0xae>
 80012ce:	2301      	movs	r3, #1
 80012d0:	4628      	mov	r0, r5
 80012d2:	47b0      	blx	r6
 80012d4:	4602      	mov	r2, r0
 80012d6:	1c50      	adds	r0, r2, #1
 80012d8:	d1c9      	bne.n	800126e <__sflush_r+0x32>
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0c6      	beq.n	800126e <__sflush_r+0x32>
 80012e0:	2b1d      	cmp	r3, #29
 80012e2:	d001      	beq.n	80012e8 <__sflush_r+0xac>
 80012e4:	2b16      	cmp	r3, #22
 80012e6:	d11e      	bne.n	8001326 <__sflush_r+0xea>
 80012e8:	602f      	str	r7, [r5, #0]
 80012ea:	2000      	movs	r0, #0
 80012ec:	e022      	b.n	8001334 <__sflush_r+0xf8>
 80012ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	e01b      	b.n	800132e <__sflush_r+0xf2>
 80012f6:	690f      	ldr	r7, [r1, #16]
 80012f8:	2f00      	cmp	r7, #0
 80012fa:	d0f6      	beq.n	80012ea <__sflush_r+0xae>
 80012fc:	0793      	lsls	r3, r2, #30
 80012fe:	680e      	ldr	r6, [r1, #0]
 8001300:	bf08      	it	eq
 8001302:	694b      	ldreq	r3, [r1, #20]
 8001304:	600f      	str	r7, [r1, #0]
 8001306:	bf18      	it	ne
 8001308:	2300      	movne	r3, #0
 800130a:	eba6 0807 	sub.w	r8, r6, r7
 800130e:	608b      	str	r3, [r1, #8]
 8001310:	f1b8 0f00 	cmp.w	r8, #0
 8001314:	dde9      	ble.n	80012ea <__sflush_r+0xae>
 8001316:	6a21      	ldr	r1, [r4, #32]
 8001318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800131a:	4643      	mov	r3, r8
 800131c:	463a      	mov	r2, r7
 800131e:	4628      	mov	r0, r5
 8001320:	47b0      	blx	r6
 8001322:	2800      	cmp	r0, #0
 8001324:	dc08      	bgt.n	8001338 <__sflush_r+0xfc>
 8001326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800132a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132e:	81a3      	strh	r3, [r4, #12]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001338:	4407      	add	r7, r0
 800133a:	eba8 0800 	sub.w	r8, r8, r0
 800133e:	e7e7      	b.n	8001310 <__sflush_r+0xd4>
 8001340:	dfbffffe 	.word	0xdfbffffe

08001344 <_fflush_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	690b      	ldr	r3, [r1, #16]
 8001348:	4605      	mov	r5, r0
 800134a:	460c      	mov	r4, r1
 800134c:	b913      	cbnz	r3, 8001354 <_fflush_r+0x10>
 800134e:	2500      	movs	r5, #0
 8001350:	4628      	mov	r0, r5
 8001352:	bd38      	pop	{r3, r4, r5, pc}
 8001354:	b118      	cbz	r0, 800135e <_fflush_r+0x1a>
 8001356:	6a03      	ldr	r3, [r0, #32]
 8001358:	b90b      	cbnz	r3, 800135e <_fflush_r+0x1a>
 800135a:	f7ff f9ad 	bl	80006b8 <__sinit>
 800135e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f3      	beq.n	800134e <_fflush_r+0xa>
 8001366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001368:	07d0      	lsls	r0, r2, #31
 800136a:	d404      	bmi.n	8001376 <_fflush_r+0x32>
 800136c:	0599      	lsls	r1, r3, #22
 800136e:	d402      	bmi.n	8001376 <_fflush_r+0x32>
 8001370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001372:	f7ff fb98 	bl	8000aa6 <__retarget_lock_acquire_recursive>
 8001376:	4628      	mov	r0, r5
 8001378:	4621      	mov	r1, r4
 800137a:	f7ff ff5f 	bl	800123c <__sflush_r>
 800137e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001380:	07da      	lsls	r2, r3, #31
 8001382:	4605      	mov	r5, r0
 8001384:	d4e4      	bmi.n	8001350 <_fflush_r+0xc>
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	059b      	lsls	r3, r3, #22
 800138a:	d4e1      	bmi.n	8001350 <_fflush_r+0xc>
 800138c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800138e:	f7ff fb8b 	bl	8000aa8 <__retarget_lock_release_recursive>
 8001392:	e7dd      	b.n	8001350 <_fflush_r+0xc>

08001394 <__swhatbuf_r>:
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	460c      	mov	r4, r1
 8001398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800139c:	2900      	cmp	r1, #0
 800139e:	b096      	sub	sp, #88	@ 0x58
 80013a0:	4615      	mov	r5, r2
 80013a2:	461e      	mov	r6, r3
 80013a4:	da0d      	bge.n	80013c2 <__swhatbuf_r+0x2e>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	bf14      	ite	ne
 80013b2:	2340      	movne	r3, #64	@ 0x40
 80013b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013b8:	2000      	movs	r0, #0
 80013ba:	6031      	str	r1, [r6, #0]
 80013bc:	602b      	str	r3, [r5, #0]
 80013be:	b016      	add	sp, #88	@ 0x58
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
 80013c2:	466a      	mov	r2, sp
 80013c4:	f000 f848 	bl	8001458 <_fstat_r>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	dbec      	blt.n	80013a6 <__swhatbuf_r+0x12>
 80013cc:	9901      	ldr	r1, [sp, #4]
 80013ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013d6:	4259      	negs	r1, r3
 80013d8:	4159      	adcs	r1, r3
 80013da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013de:	e7eb      	b.n	80013b8 <__swhatbuf_r+0x24>

080013e0 <__smakebuf_r>:
 80013e0:	898b      	ldrh	r3, [r1, #12]
 80013e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013e4:	079d      	lsls	r5, r3, #30
 80013e6:	4606      	mov	r6, r0
 80013e8:	460c      	mov	r4, r1
 80013ea:	d507      	bpl.n	80013fc <__smakebuf_r+0x1c>
 80013ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	6123      	str	r3, [r4, #16]
 80013f4:	2301      	movs	r3, #1
 80013f6:	6163      	str	r3, [r4, #20]
 80013f8:	b003      	add	sp, #12
 80013fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fc:	ab01      	add	r3, sp, #4
 80013fe:	466a      	mov	r2, sp
 8001400:	f7ff ffc8 	bl	8001394 <__swhatbuf_r>
 8001404:	9f00      	ldr	r7, [sp, #0]
 8001406:	4605      	mov	r5, r0
 8001408:	4639      	mov	r1, r7
 800140a:	4630      	mov	r0, r6
 800140c:	f7ff fbba 	bl	8000b84 <_malloc_r>
 8001410:	b948      	cbnz	r0, 8001426 <__smakebuf_r+0x46>
 8001412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001416:	059a      	lsls	r2, r3, #22
 8001418:	d4ee      	bmi.n	80013f8 <__smakebuf_r+0x18>
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	e7e2      	b.n	80013ec <__smakebuf_r+0xc>
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	6020      	str	r0, [r4, #0]
 800142a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800142e:	81a3      	strh	r3, [r4, #12]
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001436:	b15b      	cbz	r3, 8001450 <__smakebuf_r+0x70>
 8001438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800143c:	4630      	mov	r0, r6
 800143e:	f000 f81d 	bl	800147c <_isatty_r>
 8001442:	b128      	cbz	r0, 8001450 <__smakebuf_r+0x70>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	431d      	orrs	r5, r3
 8001454:	81a5      	strh	r5, [r4, #12]
 8001456:	e7cf      	b.n	80013f8 <__smakebuf_r+0x18>

08001458 <_fstat_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d07      	ldr	r5, [pc, #28]	@ (8001478 <_fstat_r+0x20>)
 800145c:	2300      	movs	r3, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	602b      	str	r3, [r5, #0]
 8001466:	f7ff f812 	bl	800048e <_fstat>
 800146a:	1c43      	adds	r3, r0, #1
 800146c:	d102      	bne.n	8001474 <_fstat_r+0x1c>
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	b103      	cbz	r3, 8001474 <_fstat_r+0x1c>
 8001472:	6023      	str	r3, [r4, #0]
 8001474:	bd38      	pop	{r3, r4, r5, pc}
 8001476:	bf00      	nop
 8001478:	200001b8 	.word	0x200001b8

0800147c <_isatty_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d06      	ldr	r5, [pc, #24]	@ (8001498 <_isatty_r+0x1c>)
 8001480:	2300      	movs	r3, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	602b      	str	r3, [r5, #0]
 8001488:	f7ff f811 	bl	80004ae <_isatty>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_isatty_r+0x1a>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_isatty_r+0x1a>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	200001b8 	.word	0x200001b8

0800149c <_sbrk_r>:
 800149c:	b538      	push	{r3, r4, r5, lr}
 800149e:	4d06      	ldr	r5, [pc, #24]	@ (80014b8 <_sbrk_r+0x1c>)
 80014a0:	2300      	movs	r3, #0
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	602b      	str	r3, [r5, #0]
 80014a8:	f7ff f81a 	bl	80004e0 <_sbrk>
 80014ac:	1c43      	adds	r3, r0, #1
 80014ae:	d102      	bne.n	80014b6 <_sbrk_r+0x1a>
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	b103      	cbz	r3, 80014b6 <_sbrk_r+0x1a>
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	bd38      	pop	{r3, r4, r5, pc}
 80014b8:	200001b8 	.word	0x200001b8

080014bc <_init>:
 80014bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014be:	bf00      	nop
 80014c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014c2:	bc08      	pop	{r3}
 80014c4:	469e      	mov	lr, r3
 80014c6:	4770      	bx	lr

080014c8 <_fini>:
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	bf00      	nop
 80014cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ce:	bc08      	pop	{r3}
 80014d0:	469e      	mov	lr, r3
 80014d2:	4770      	bx	lr
